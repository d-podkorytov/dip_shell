Erlang VM CLI extension

GOAL

The goal of project is more comfortable working inside erl's CLI.

OVERVIEW

For more comfortable working inside erl the Dip_shell project have:
1) Recomputable prompt;
2) Trivial but usable internal build system;
3) Rudimental orchestration calls such as run functions of modules 
   with given argument on whole cluster or on given nodes;
4) Welcome script , for runing it when erl start;
5) Runing SSH shell or execute SSH command in remote host parse and handle results; 
6) Iteraction with OS of node, run OS commands, copy, move or delete files;
7) Fetch files by HTTP, unzip/zip, tat/untar functions;
8) It can interact with user by functional style for works inside ERLANG VM; 
9) Short aliases for frequently using commands and functions calls. 

Dip_sh is extension for ERLANG OTP CLI.
It made for doing some things without jumping from VM to OS shell.
For example it can handle text files, copy, move or delete files, zip, unzip archives,
download URLS, dump erlang term to text file or load terms from file.
Also it have a rudimentary, but usable build system for projects. 

COMPILATION:
 erl -make

INSTALLATION

It needs only if you desided to run dip_sh for all erl calls:

1)Run erlang VM
 $erl

2) Type inside VM: 
 1> dip_shell:install().

 You will get command line with prompt like:
  
[{192,168,8,100}]-nonode@nohost-/home/user>> 

Will get message like
file ~/.erlang was created   
ok

Now dip_sh will be start automatically for all erl runs.

DEINSTALLATION

Remove line  
"code:load_abs("/home/es/w/dip_shell/user_default"),user_default:init_prompt()."
from your's ~/.erlang file or just do 
$rm ~/.erlang
but removing whole file is not so safe like carefully edit it.

DIP_SH COMMANDS

1) Function calls:
 
 call(Module,Func,Args) is apply(Module,Func,Args) or call Module:Func(Args);

 mcall(Nodes,Module,Func,Args) is rpc:mcall(Nodes,Modules,Module,Func,Args) 
                               or calling Module:Func(Args) for given Nodes;

 mcall(Module,Func,Args) is rpc:mcall(Modules,Module,Func,Args) 
                         or calling Module:Func(Args) for each node;

 aliases(). Show all aliases, read it from file ~/.dip_aliases

 a("Alias Name"). Run alias by given name from file ~/.dip_aliases
 a("Alias Name",Args). Run alias by given name from file ~/.dip_aliases with given arguments for call

Example:

 [{192,168,8,100}]-nonode@nohost-"/home/es/w/dip_shell">aliases().
[{date,{os,cmd,["date"]}},
 {nodes_date,{cluster,os,cmd,["date"]}},
 {welcome,[{cluster,os,cmd,["date"]},
           {cluster,erlang,node,[]},
           {os,cmd,["df -H"]}]}]

[{192,168,8,100}]-nonode@nohost-"/home/es/w/dip_shell">a(date).  
["Mon 11 May 2020 07:18:46 AM PDT"]

 get_env(). Get OS environment.

 get_env(Variable). Get OS environment by given name Variable, for example get_env("HOME"). 

 s(Mosule). Module:start()

 c().    alias for erlc *.erl
 make(). alias for make:all().  

 mkdir(Name). Make directory.

 df().      alias for OS command df
 du().      alias for OS command du *
 netstat(). alias for netstat -an

Directory list functions

 l().

 l(Ext). use like l(".txt").

 lf(Func/2).       foldl for ls

 lf("Path",Func/2). foldl for ls with given path.

 lm(Func/2).       map for ls

 lm("Path",Func/2). map for ls with given path.

 le(). ls *.erl

 la(). ls *.app

 lc(). ls *.config

 lt(). ls *.txt

 lh(). ls *.hrl

 lb(). ls *.beam

 lb(Path). 

 lsrc().

 lsrc("Arg").

 lsrc("From","To").

 lprj("From","To").

 src().

 prj().

 fetch_build_cmd("Arg").

 lext("Arg").

 lext("From","To").

 lext/3 

 lf2("From","To").

Predicates for string filtration:

 ends("line","ne"). return true for line with given end

 starts("line","li"). return true for line with given start string

 inside("line","in").return true for line with given string inside

 line_to_tuple(Line,Separators) -> list_to_tuple(string:tokens(Line,Separators)).

 line_to_tuple(Line) -> line_to_tuple(Line," \t").

 csv_line_to_tuple(Line). Convertation CSV line to tuple

 init_prompt(). Init command prompt

 hook(history).

 ip(). It show host ip address.

 name(). It show VM name.

 netstat(). Show network activity by netstat -an

 List operatios:

 foldl/3  Alias for lists:foldl/3

 map(F/1,List). Alias for lists:map/2

 reverse(List). reverse List

 zip_ls("File.zip"). return content for zip file.

 zip("File.zip",Files_list). It zip list of files.

 zip("Dir"). zip folder Dir to Dir.zip file

 zip(). zip current folder and store it as ../current_folder_name.zip

 unzip("file.zip"). unzip file

 untgz("file.tgz"). untar file.tgz

 untar("file.tar"). untar file.tar

 http("From","To").

 http_fetch("URL").

 http_fetch/3 

 http_tests().

 http_test("Arg").

 http_test().

 transform_name("Arg").

 post_transform("Arg").

 do_build("Arg").

 open_file("FileName").

 close_file(File).

 consult_file("FileName").

 read_file("Arg").

 format_file/3 

 out("Arg").

 outs("Arg").

 out(File,"To").

 outs(File,"To").

 write_file(File,"Arg").

 write_session_file(File,Session). write file session as tree of calls


 cmd("OS command"). run Operating System's command 

 cp("From","To"). copy file From -> To

 mv("From","To"). rename file

 rm("Arg").       remove file

 eval("Script").     run erlang script

 ed("File_Name").          run editor for file
 ed({"File_Name",1}).      run editor for set of files
    
 map_file_lines(fun(A) -> A end,"Text_file"). run function of one argument for each line of given text file.

 fold_file_lines(F2,Acc,"Text_file")  foldl for text file

 try_f0(F0). is alias for try F0() of ... end

 try_f1(F1,Arg). is alias for try F1(Arg) of ... end

 help(). return functions 

 build(). build project

 download_deps(). download project dependencies

 upload(). publish project

 exit().

 erl_add_patha("Arg"). add path for loading modules

 erl_get_path(). return all system pathes for loading modules.

 exports(). return modules exports for current directory

 exports("path"). return modules exports for directory "path"

 system_export_to_file(). return all modules exports for whole ERLANG OTP 

 export_to_file("File"). 

 SSH

 ssh(Addr,Port,User). Run SSH shell

 scp(From,To,Port).   Copy files over SSH

 ssh_exec(Addr,Port,User,Pass,Cmd). Run OS command by SSH
 